{"version":3,"sources":["areas/countryData/countriesForm.js","areas/home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["edges","isValid","breadthFirstSearch","startingCountry","destination","toUpperCase","graph","buildGraph","numberOfCountries","queue","visited","Set","finalRoute","Map","push","add","length","currentCountry","shift","borderingCountries","set","keys","nextCountry","has","concat","edge","a","b","DisplayCountryForm","useState","userCountryCodeInput","setUserCountryCodeInput","displayRoute","setDisplayRoute","onClick","e","preventDefault","shortname","type","placeholder","required","value","onChange","target","cleanUp","Array","from","join","Home","className","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEMA,EAAQ,CACZ,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,OACP,CAAC,MAAM,QAILC,GAAU,EAERC,EAAqB,SAACF,EAAOG,EAAiBC,GAElDA,EAAcA,EAAYC,cAC1B,IAAMC,EAAQC,EAAWP,GAGnBQ,EAAoB,GAG1BA,EAAkBL,GAAmB,EAGrC,IAAMM,EAAQ,GAGRC,EAAU,IAAIC,IACdC,EAAa,IAAIC,IAOvB,IAJAJ,EAAMK,KAAKX,GACXO,EAAQK,IAAIZ,GAGNM,EAAMO,OAAS,GAAG,CAEtB,IAAMC,EAAiBR,EAAMS,QACvBC,EAAqBb,EAAMW,IAAmB,GAGpD,GAAGA,IAAmBb,EAGpB,OADAH,GAAU,EACHW,EAAWQ,IAAIH,EAAeb,GAAaiB,OAT9B,oBAaCF,GAbD,IAatB,IAAI,EAAJ,qBAA2C,CAAC,IAApCG,EAAmC,QACrCZ,EAAQa,IAAID,KACdd,EAAkBc,GAAed,EAAkBS,GAAkB,EACrER,EAAMK,KAAKQ,GACXV,EAAWQ,IAAIH,EAAgBK,GAE/BZ,EAAQK,IAAIO,KAnBM,+BAuBxB,MAAO,YAAYE,OAAO,IAAMpB,EAAY,IAAM,cAAcC,eAG5DE,EAAa,SAACP,GAClB,IAD4B,EACtBM,EAAQ,GADc,cAGZN,GAHY,IAG5B,IAAI,EAAJ,qBAAuB,CAAC,IAAhByB,EAAe,QACrB,cAAcA,EAAd,GAAMC,EAAN,KAASC,EAAT,KACKD,KAAKpB,IAAQA,EAAMoB,GAAK,IACxBC,KAAKrB,IAAQA,EAAMqB,GAAK,IAC7BrB,EAAMoB,GAAGZ,KAAKa,GACdrB,EAAMqB,GAAGb,KAAKY,IARY,8BAU5B,OAAOpB,GA6CMsB,MA1Cf,WACE,MAAuDC,mBAAS,IAAhE,mBAAMC,EAAN,KAA4BC,EAA5B,KACA,EAAuCF,mBAAS,IAAhD,mBAAMG,EAAN,KAAoBC,EAApB,KAmBA,OACE,qCACE,sBAAMC,QAlBW,SAACC,GACpBA,EAAEC,iBAEFL,EAAwB,KAetB,SACM,qCACI,0EACA,uBACEM,UAAU,YACVC,KAAK,OACLC,YAAY,MACZC,UAAQ,EACRC,MAAOX,EACPY,SAAU,SAAAP,GAAC,OAAIJ,EAAwBI,EAAEQ,OAAOF,UAElD,wBAAQP,SAAqB,IAAZjC,EAvBH,WAC1B,IAAI2C,EAAUC,MAAMC,KAAK5C,EAAmBF,EA7E1B,MA6EgD8B,IAClEG,EAAgBW,EAAQG,KAAK,QAGD,WAC5B,IAAIH,EAAUC,MAAMC,KAAK5C,EAAmBF,EAlF1B,MAkFgD8B,IAClEG,EAAgBW,EAAQG,KAAK,MAgBjB,6BAGR,+CAAkBf,SCnGXgB,MAhBf,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,iDAIF,+BACA,cAAC,EAAD,UCCSC,MAXf,WACE,OACE,cAAC,IAAD,UACM,cAAC,IAAD,UAEE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,WCItBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.09be1a80.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst edges = [\r\n  ['CAN','USA'],\r\n  ['USA','MEX'],\r\n  ['MEX','BLZ'],\r\n  ['MEX','GTM'],\r\n  ['BLZ','GTM'],\r\n  ['GTM','SLV'],\r\n  ['GTM','HND'],\r\n  ['SLV','HND'],\r\n  ['HND','NIC'],\r\n  ['NIC','CRI'],\r\n  ['CRI','PAN']\r\n];\r\n\r\nlet startingCountry = 'USA';\r\nlet isValid = false;\r\n\r\nconst breadthFirstSearch = (edges, startingCountry, destination) => {\r\n  //conversions: value entered to uppercase and edges to adjacency list\r\n  destination = destination.toUpperCase();\r\n  const graph = buildGraph(edges);\r\n\r\n  //declare object to count number of countries it takes to reach destination \r\n  const numberOfCountries = {};\r\n\r\n  //startingCountry is 0 edges away from itself\r\n  numberOfCountries[startingCountry] = 0;\r\n\r\n  //declare empty queue to shift first country into during checks\r\n  const queue = [];\r\n\r\n  //Map to keep track of visited countries\r\n  const visited = new Set();\r\n  const finalRoute = new Map();\r\n\r\n  //immediately push startingCountry into queue and visited set\r\n  queue.push(startingCountry);\r\n  visited.add(startingCountry);\r\n\r\n  //while queue is not empty\r\n  while(queue.length > 0) {\r\n    //get current country\r\n    const currentCountry = queue.shift();\r\n    const borderingCountries = graph[currentCountry] || [];\r\n    \r\n    //if reach destination return count of countries it takes to get there\r\n    if(currentCountry === destination) {\r\n      //add destination to finalRoute and return all countries in final route and set isValue true\r\n      isValid = true;\r\n      return finalRoute.set(currentCountry,destination).keys();\r\n    }\r\n    \r\n    //loop through all possible adjacent countries to construct a route leading to the destination and account for already visited countries\r\n    for(let nextCountry of borderingCountries) {\r\n      if(!visited.has(nextCountry)) {\r\n        numberOfCountries[nextCountry] = numberOfCountries[currentCountry] + 1;\r\n        queue.push(nextCountry);\r\n        finalRoute.set(currentCountry, nextCountry);\r\n        //add nextCountry to visited\r\n        visited.add(nextCountry);\r\n      }\r\n    }\r\n  }\r\n  return 'route to '.concat('\\'', destination,'\\'', ' not found').toUpperCase();;\r\n};\r\n\r\nconst buildGraph = (edges) => {\r\n  const graph = {};\r\n\r\n  for(let edge of edges) {\r\n    const[a, b] = edge; \r\n    if(!(a in graph)) graph[a] = [];\r\n    if(!(b in graph)) graph[b] = [];\r\n    graph[a].push(b);\r\n    graph[b].push(a);\r\n  }\r\n  return graph;\r\n};\r\n\r\nfunction DisplayCountryForm() {\r\n  const[userCountryCodeInput, setUserCountryCodeInput] = useState('')\r\n  const[displayRoute, setDisplayRoute] = useState([]);\r\n\r\n  //get value from input field\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //clear field after submit\r\n    setUserCountryCodeInput('')\r\n  }\r\n\r\n  const getDriverRouteComma = () => {\r\n    let cleanUp = Array.from(breadthFirstSearch(edges,startingCountry,userCountryCodeInput));\r\n    setDisplayRoute(cleanUp.join(', '));\r\n  }\r\n\r\n  const getDriverRouteNoComma = () => {\r\n    let cleanUp = Array.from(breadthFirstSearch(edges,startingCountry,userCountryCodeInput));\r\n    setDisplayRoute(cleanUp.join(''));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onClick={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Enter a 3-Letter Country Code Below:</legend>\r\n                <input \r\n                  shortname=\"shortname\"\r\n                  type=\"text\" \r\n                  placeholder='NIC'\r\n                  required\r\n                  value={userCountryCodeInput}\r\n                  onChange={e => setUserCountryCodeInput(e.target.value)}\r\n                />\r\n                <button onClick={isValid === true ? getDriverRouteComma : getDriverRouteNoComma}>Find Route</button>\r\n            </fieldset>\r\n        </form>\r\n        <p>Travel Route: {displayRoute}</p>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default DisplayCountryForm;","import './Home.css';\r\nimport Countries from '../countryData/countriesForm';\r\n\r\nfunction Home() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <h1>\r\n          Logistics Spy\r\n        </h1>\r\n      </header>\r\n      <main>\r\n      <Countries />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Home from './areas/home/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n          <Routes>\r\n            {/* put your other app routes here */}\r\n            <Route path='/' element={<Home/>} />\r\n          </Routes>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}