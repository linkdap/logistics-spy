{"version":3,"sources":["app/areas/countryData/countriesForm.js","app/areas/home/Home.js","App.js","bootstrap.js","createStore.js"],"names":["edges","buildGraph","graph","edge","a","b","push","DisplayCountryForm","useState","userCountryCodeInput","setUserCountryCodeInput","displayRoute","setDisplayRoute","onClick","e","preventDefault","shortname","type","placeholder","required","value","onChange","target","cleanUp","Array","from","startingCountry","destination","toUpperCase","numberOfCountries","queue","visited","Set","finalRoute","Map","add","length","currentCountry","shift","borderingCountries","set","keys","nextCountry","has","concat","breadthFirstSearch","join","Home","className","App","loggingConfig","store","path","component","bootstrap","config","authClient","ajaxClient","epicMiddleware","createEpicMiddleware","dependencies","rootReducer","combineReducers","replace_me_before_doing_anything_at_all","rootEpic","combineEpics","middlewares","LoggingMiddleware","createReduxStore","applyMiddleware","run","createStore","AjaxClient","createDefault","defaultForWebApps","render","document","getElementById"],"mappings":"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","file":"static/js/5.5f0432fa.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst edges = [\r\n  ['CAN','USA'],\r\n  ['USA','MEX'],\r\n  ['MEX','BLZ'],\r\n  ['MEX','GTM'],\r\n  ['BLZ','GTM'],\r\n  ['GTM','SLV'],\r\n  ['GTM','HND'],\r\n  ['SLV','HND'],\r\n  ['HND','NIC'],\r\n  ['NIC','CRI'],\r\n  ['CRI','PAN']\r\n];\r\n\r\nlet startingCountry = 'USA';\r\n\r\nconst breadthFirstSearch = (edges, startingCountry, destination) => {\r\n  //conversions: value entered to uppercase and edges to adjacency list\r\n  destination = destination.toUpperCase();\r\n  \r\n  //handle nothing submits \r\n  \r\n  const graph = buildGraph(edges);\r\n\r\n  //declare object to count number of countries it takes to reach destination \r\n  const numberOfCountries = {};\r\n\r\n  //startingCountry is 0 edges away from itself\r\n  numberOfCountries[startingCountry] = 0;\r\n\r\n  const queue = [];\r\n  //Map to keep track of visited countries\r\n  const visited = new Set();\r\n  const finalRoute = new Map();\r\n\r\n  //immediately push startingCountry into queue and visited set\r\n  queue.push(startingCountry);\r\n  visited.add(startingCountry);\r\n\r\n  //while queue is not empty\r\n  while(queue.length > 0) {\r\n    //get current country\r\n    const currentCountry = queue.shift();\r\n    const borderingCountries = graph[currentCountry] || [];\r\n    \r\n    //if reach destination return count of countries it takes to get there\r\n    if(currentCountry === destination) {\r\n      //add destination to finalRoute and return all countries in final route\r\n      return finalRoute.set(currentCountry,destination).keys();\r\n    }\r\n    \r\n    //loop through all possible adjacent countries to construct a route leading to the destination and account for already visited countries\r\n    for(let nextCountry of borderingCountries) {\r\n      if(!visited.has(nextCountry)) {\r\n        numberOfCountries[nextCountry] = numberOfCountries[currentCountry] + 1;\r\n        queue.push(nextCountry);\r\n        finalRoute.set(currentCountry, nextCountry);\r\n        //add nextCountry to visited\r\n        visited.add(nextCountry);\r\n      }\r\n    }\r\n  }\r\n  return 'route to '.concat('\\'', destination,'\\'', ' not found').toUpperCase();;\r\n};\r\n\r\nconst buildGraph = (edges) => {\r\n  const graph = {};\r\n\r\n  for(let edge of edges) {\r\n    const[a, b] = edge; \r\n    if(!(a in graph)) graph[a] = [];\r\n    if(!(b in graph)) graph[b] = [];\r\n    graph[a].push(b);\r\n    graph[b].push(a);\r\n  }\r\n  return graph;\r\n};\r\n\r\nfunction DisplayCountryForm() {\r\n  const[userCountryCodeInput, setUserCountryCodeInput] = useState('')\r\n  const[displayRoute, setDisplayRoute] = useState([]);\r\n\r\n  //get value from input field\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //clear field after submit\r\n    setUserCountryCodeInput('')\r\n  }\r\n\r\n  const getDriverRoute = () => {\r\n    let cleanUp = Array.from(breadthFirstSearch(edges,startingCountry,userCountryCodeInput));\r\n    setDisplayRoute(cleanUp.join(', '));\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <form onClick={handleSubmit}>\r\n            <fieldset>\r\n                <legend>Enter a 3-Letter Country Code Below:</legend>\r\n                <input \r\n                  shortname=\"shortname\"\r\n                  type=\"text\" \r\n                  placeholder='NIC'\r\n                  required\r\n                  value={userCountryCodeInput}\r\n                  onChange={e => setUserCountryCodeInput(e.target.value)}\r\n                />\r\n                <button onClick={getDriverRoute}>Find Route</button>\r\n            </fieldset>\r\n        </form>\r\n        <p>Travel Route: {displayRoute}</p>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default DisplayCountryForm;\r\n","import './Home.scss';\nimport Countries from '../countryData/countriesForm';\n\nfunction Home() {\n  \n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <h1>\n          Logistics Spy\n        </h1>\n      </header>\n      <main>\n      <Countries />\n      </main>\n    </div>\n  );\n}\n\nexport default Home;\n","import { LoggingWrapper } from '@chr/web-components-labs'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport Home from './app/areas/home/Home';\n\nconst App = ({loggingConfig, store}) => {\n  return (\n    <LoggingWrapper loggingConfig={loggingConfig}>\n      <Router>\n        <Provider store={store}>\n          <Switch>\n            {/* put your other app routes here */}\n            <Route path='/' component={Home} />\n          </Switch>\n        </Provider>\n      </Router>\n    </LoggingWrapper>\n  );\n};\n\nexport default App;\n","import './index.scss';\nimport { render } from 'react-dom';\nimport App from './App';\nimport { AjaxClient } from '@chr/common-web-ui-ajax-client';\nimport { createStore } from './createStore';\nimport { defaultForWebApps } from '@chr/common-javascript-logging-core';\n\nexport const bootstrap = (config, authClient) => {\n  const ajaxClient = AjaxClient.createDefault(authClient);\n\n  const store = createStore(config, authClient, ajaxClient);\n\n  const loggingConfig = defaultForWebApps(config, authClient);\n\n  render(\n    <App loggingConfig={loggingConfig} store={store} />,\n    document.getElementById('root')\n  );\n}\n","import { createStore as createReduxStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport { LoggingMiddleware } from '@chr/common-javascript-logging-redux-middleware'\n\nexport const createStore = (config, authClient, ajaxClient) => {\n\n  const epicMiddleware = createEpicMiddleware({\n    dependencies: {\n      ajaxClient,\n      authClient,\n      ...config\n    }\n  });\n\n  const rootReducer = combineReducers({\n    // put all your area and common reducers here\n    // this is a filler to make redux happy that there is *something* in your state atom\n    replace_me_before_doing_anything_at_all: () => null\n  })\n\n  const rootEpic = combineEpics(\n    // put all your area and common epics here\n  );\n\n  const middlewares = process.env.NODE_ENV === 'production'\n    ? [epicMiddleware, LoggingMiddleware]\n    : [epicMiddleware, LoggingMiddleware, createLogger()];\n\n  const store = createReduxStore(\n    rootReducer,\n    applyMiddleware(...middlewares)\n  );\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n}\n"],"sourceRoot":""}